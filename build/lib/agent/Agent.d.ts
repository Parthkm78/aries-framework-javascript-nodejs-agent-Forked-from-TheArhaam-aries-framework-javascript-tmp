/// <reference types="indy-sdk" />
import { InitConfig } from '../types';
import { ConnectionService } from '../protocols/connections/ConnectionService';
import { ProofService } from '../protocols/proof/ProofService';
import { ProviderRoutingService } from '../protocols/routing/ProviderRoutingService';
import { ConsumerRoutingService } from '../protocols/routing/ConsumerRoutingService';
import { BasicMessageService } from '../protocols/basicmessage/BasicMessageService';
import { TrustPingService } from '../protocols/trustping/TrustPingService';
import { MessagePickupService } from '../protocols/messagepickup/MessagePickupService';
import { MessageReceiver } from './MessageReceiver';
import { LedgerService } from './LedgerService';
import { Dispatcher } from './Dispatcher';
import { MessageSender } from './MessageSender';
import { InboundTransporter } from '../transport/InboundTransporter';
import { OutboundTransporter } from '../transport/OutboundTransporter';
import { MessageRepository } from '../storage/MessageRepository';
import { BasicMessageRecord } from '../storage/BasicMessageRecord';
import { Repository } from '../storage/Repository';
import { ConnectionRecord } from '../storage/ConnectionRecord';
import { AgentConfig } from './AgentConfig';
import { Wallet } from '../wallet/Wallet';
import { ProvisioningRecord } from '../storage/ProvisioningRecord';
import { ProvisioningService } from './ProvisioningService';
import { ConnectionsModule } from '../modules/ConnectionsModule';
import { RoutingModule } from '../modules/RoutingModule';
import { BasicMessagesModule } from '../modules/BasicMessagesModule';
import { LedgerModule } from '../modules/LedgerModule';
import { CredentialsModule } from '../modules/CredentialsModule';
import { ProofsModule } from '../modules/ProofsModule';
import { CredentialService } from '../protocols/credentials/CredentialService';
import { CredentialRecord } from '../storage/CredentialRecord';
import { ProofRecord } from '../storage/ProofRecord';
export declare class Agent {
    protected wallet: Wallet;
    protected agentConfig: AgentConfig;
    protected messageReceiver: MessageReceiver;
    protected dispatcher: Dispatcher;
    protected messageSender: MessageSender;
    protected connectionService: ConnectionService;
    protected proofService: ProofService;
    protected basicMessageService: BasicMessageService;
    protected providerRoutingService: ProviderRoutingService;
    protected consumerRoutingService: ConsumerRoutingService;
    protected trustPingService: TrustPingService;
    protected messagePickupService: MessagePickupService;
    protected provisioningService: ProvisioningService;
    protected ledgerService: LedgerService;
    protected credentialService: CredentialService;
    protected basicMessageRepository: Repository<BasicMessageRecord>;
    protected connectionRepository: Repository<ConnectionRecord>;
    protected provisioningRepository: Repository<ProvisioningRecord>;
    protected credentialRepository: Repository<CredentialRecord>;
    protected proofRepository: Repository<ProofRecord>;
    inboundTransporter: InboundTransporter;
    connections: ConnectionsModule;
    proof: ProofsModule;
    routing: RoutingModule;
    basicMessages: BasicMessagesModule;
    ledger: LedgerModule;
    credentials: CredentialsModule;
    constructor(initialConfig: InitConfig, inboundTransporter: InboundTransporter, outboundTransporter: OutboundTransporter, indy: Indy, messageRepository?: MessageRepository);
    init(): Promise<void>;
    getPublicDid(): import("../wallet/Wallet").DidInfo | undefined;
    getMediatorUrl(): string | undefined;
    receiveMessage(inboundPackedMessage: unknown): Promise<import("../types").OutboundPackage | import("../types").OutboundMessage<import("./AgentMessage").AgentMessage> | undefined>;
    closeAndDeleteWallet(): Promise<void>;
    protected registerHandlers(): void;
    protected registerModules(): void;
}
